=Терминология=
* Класс-обертка - класс, который агрегирует в себе элементарные типы данных с целью изменения или дополнения их логики;

=Цели использования классов-оберток=
Классы-обертки создаются для решения следующих задач:
* Добавление логики элементарным типам - классы-обертки позволяют реализовать некоторые механизмы обработки элементарных типов с использованием объектного интерфейса. Часто это упрощает операции, которые можно выполнить над элементарными типами с помощью стандартных функций языка;
* Верификация входных данных - так как все классы-обертки реализуют интерфейс Restorable (см. D\library\patterns\structure\conversion\Restorable), они могут быть восстановлены из строки в случае, если строка отвечает требованиям верификации данной обертки. Эта логика позволяет выполнять проверку приходящих от пользователя данных на уровне домена (см. ниже).

=Реализация классов-оберток=
Все классы-обертки являются дочерними по отношению к классу Wrap данного пакета. Класс реализует интерфейс Restorable (см. D\library\patterns\structure\conversion\Restorable) по средствам trait TRestorable (см. D\library\patterns\structure\conversion\TRestorable), что позволяет восстанавливать все обертки из строки. Данный родительский класс не содержит базовой логики класса-обертки, такой как получение, хранение и возврат оборачиваемых данных, так как это не позволяет строго типизировать оборачиваемые значения.

При реализации данного класса дочерним, необходимо реализовать механизмы хранения и возврата оборачиваемых данных (конструктор и метод getVal).

=Обертки элементарных типов=
Пакет содержит обертки для элементарных типов языка, таких как: boolean (Boolean), integer (Integer), double (Float), string (String), array (Array). Все эти класс дополняют элементарные типы данных дополнительной логикой верификации и обработки. В частности некоторые оберкти содержат методы hasType и hasLength, позволяющие выполнить верификацию хранимых данных в соответствии с указанными критериями. Именно данные методы используются классом InvalidArgumentException (см. \D\library\patterns\entity\exceptions\semanticExceptions\InvalidArgumentException) для контроля параметров методов.

Важно помнить, что конструкторы оберток элементарных типов принимают данные только этих типов. Так, конструктор оберкти Integer не может принимать double данные не смотря на то, что их можно привести к типу integer. Для приведения строк к типу обертки используйте метод reestablish.

Ниже приведет пример использования обертки Integer:

 $i = new Integer(51);
 echo $i->getVal(); // 51 - содержимое обертки.

=Верификация входных данных=
Так как все классы-обертки реализуют класс Restorable, они могут быть восстановлены из строки, но только если она может быть приведена к типу обертки без потери данных. Это свойство оберток используется слоем домена для верификации поступающих от слоя представления данных. В частности если указать тип аргумента как один из классов-оберток метода контроллера модуля, то центральный контроллер предварительно выполнит верификацию параметров этого аргумента с помощью класса-обертки, который указан в качестве типа аргумента, прежде чем передавать его модулю.

Ниже приведен пример такого метода:

 class Controller extends ModuleController{
   ...

   public function getAddressFile(\D\library\patterns\entity\dataType\Integer $fileID){
     ...
   }
 }

Как видно, метод getAddressFile модуля Console принимает один аргумент $fileID тип которого определен оберток Integer данного пакета. При вызове этого метода из слоя представления, центральный контроллер предварительно выполнит верификацию аргумента с помощью метода isReestablish класса Integer данного пакета, и если верификация будет пройдена, параметр будет передан методу.

Данный механизм позволяет избавиться от проверки входных значений в контроллерах модулей, а так же представляет простой механизм верификации данных, поступающих от слоя представления.

=Специальные обертки=
Пакет так же содержит множество специальных классов-оберток, расположенных в пакете special. Данные обертки предназначены для работы с данными специальной структуры, такими как номера телефонов, имена, адреса и т.д.