=Терминология=
* Отражение - объект, позволяющий получить информацию о некоторой программной сущности (классе, свойстве, методе, аргументе и т.д.).

=Работа с отражениями=
Когда скрипту требуется получить данные о классе или его членах, используются объекты-отражения. Эти объекты хранят всю доступную информацию о классе или его членах и позволяют получить ее при необходимости.

Стандартная библиотека языка PHP включает несколько классов-отражений (см. http://www.php.net/manual/ru/book.reflection.php), вот некоторые из них:
* ReflectionClass - отражение класса;
* ReflectionMethod - отражение метода;
* ReflectionParameter - отражение аргумента;
* ReflectionProperty - отражение свойства класса.

Все эти классы могут быть использованы для получения информации о других классах системы, но с некоторыми ограничениями (в частности отсутствует возможность аннотирования классов).

Данный пакет включает расширения стандартных отражений, но с возможностью аннотирования. Другими словами представленные в данном пакете классы являются хранилищами метаданных (см. D\library\patterns\structure\metadata). Пакет включает следующие классы:
* ReflectionClass - отражение класса;
* ReflectionMethod - отражение метода;
* ReflectionParameter - отражение аргумента;
* ReflectionProperty - отражение свойства класса.

=Работа с отражениями=
Рассмотрим работу с классами данного пакета на примере. В качестве базового класса используем следующий класс:

 class MyClass implements Reflect{
 use TReflect;
   protected $prop;

   /**
    * Описание метода
    * @return boolean
    */
   public function method(){
     ...
   }
 }

Для того, чтобы можно было получить отражение класса или его членов, класс должен реализовать интерфейс Reflect данного пакета. TReflect реализует интерфейс Reflect.

Продемонстрируем работу с отражениями:

 $rc = MyClass::getReflectionClass();
 echo $rc->getName(); // MyClass - получение имени класса.
 $rp = MyClass::getReflectionProperty('prop');
 echo $rp->getName(); // prop - получение имени свойства.
 $rm = MyClass::getReflectionMethod('method');
 echo $rm->getName(); // method - получение имени метода.

В примере показан процесс получение различных отражений класса. Объекты отражений включают гораздо больше методов для получения информации о классе, чем приведено в примере, для ознакомления со всеми, обращайтесь к официальной документации PHP.

=Получение аннотаций через отражения=
В платформе Delphinum метаданные реализуются через использование отражений. Все классы данного пакета реализуют интерфейс Described с использованием TDocMetadata, что позволяет аннотировать их. Другими словами метаданные можно получить не через объекты класса, а через их отражения. TDocMetadata определяет механизм получения метаданных из блоков документации классов и их членов. Согласно этому механизму, аннотации записываются в блоки документации классов и их членов в виде строки следующей структуры - $имя значение. Здесь, в качестве значения может выступать любая строка.

Приведем пример работы с метаданными:

 /**
  * $metadata value
  */
 class MyClass implements Reflect{
 use TReflect;
   /**
    * $metadataProp value
    */
   protected $prop;

   /**
    * Описание метода
    * @return boolean
    * $metadataMethod value
    */
   public function method(){
     ...
   }
 }

Теперь приведем пример получения метаданных от аннотированного класса:

 echo MyClass::getReflectionClass()->getMetadata('metadata'); // value - аннотация класса.
 echo MyClass::getReflectionProperty('prop')->getMetadata('metadataProp'); // value - аннотация свойства.
 echo MyClass::getReflectionMethod('method')->getMetadata('metadataMethod'); // value - аннотация метода.

Обратите внимание, что получение метаданных выполняется через отражения класса и его членов.
