=Терминология=
* Логический оператор - оператор =, !=, >, <, >=, <=, используемый для сравнения двух величин;
* Логическая связка - оператор И, ИЛИ.
* Логическое выражение - выражение, состоящее из нескольких логических операторов.

=Основа логических операций=
Все логические SQL выражения в системе представлены классом Condition. Данный класс является родителем для всех остальных классов, представляющих логические выражения, что позволяет полиморфно заменять их друг на друга.

Следующим абстрактным классом пакета является класс QueryCondition. Этот класс является родителем для логических выражений со множеством логических операторов, разделенных одной логической связкой, на пример: <членA> AND <членB> AND <членC>.

Иерархия наследования данного пакета представлена на изображении ниже:

[[File:StructureConditions.png]]

=Элементарные логические операции=
Логические операции типа: <значениеA> <оператор> <значениеB> - реализуется программно через класс LogicOperation. Данный класс использует три свойства: левый операнд, оператор и правый операнд - для представления логического члена выражения, при этом в качестве левого операнда может быть выбрано только поле запроса, а в качестве правого поле или скалярное значение.

Если необходимо определить параметризованную логическую операцию, правый операнд опускается.

Ниже приведен пример использования данного класса:
 $lo = new LogicOperation(new Field('age'), '>=', 18);
 echo $lo->interpreter(); // (age >= "18")

 $lo = new LogicOperation(new Field('age'), '>='); // Параметризованная логическая операция.
 echo $lo->interpreter(); // (age >= ?)

Логическая операция типа: <значениеA> IN (<диапазонДопустимыхЗначений>) - реализуется программно через класс INLogicOperation. Данный класс использует операнд и массив допустимых скалярных значений для формирования выражения. Массив допустимых значений может быть так же получен используя Select запрос, возвращающий этот диапазон.

Ниже приведен пример использования данного класса:

 $in = new INLogicOperation(new Field('name'));
 $in->addValue('Ivan');
 $in->addValue('Petr');
 $in->addValue('Sergei');
 echo $in->interpreter(); // (name IN ("Ivan", "Petr", "Sergei"))

 $in = new INLogicOperation(new Field('name'));
 $in->addValue('Ivan');
 $in->addValue();
 $in->addValue('Sergei');
 echo $in->interpreter(); // (name IN ("Ivan", ?, "Sergei"))

 $in = new INLogicOperation(new Field('user'));
 $s = new Select();
 $s->addFile(new Field('name'));
 $s->addTable(new Table('Users'));
 $in->setSelectQuery($s);
 echo $in->interpreter(); // (test IN (SELECT * FROM table)

=Логические выражения=
Классы AndMultiCondition и OrMultiCondition представляют логические выражения, использующие в качестве логической связки оператор AND и OR соответственно. Данные классы применяются как простое средство создания сложных выражений, так как не требуют указания логической связки для каждого члена.

Ниже приведен пример использования данных классов:

 $qc = new AndMultiCondition;
 $qc->addCondition(new LogicOperation(new Field('name'), '=', 'ivan'));
 $qc->addCondition(new LogicOperation(new Field('OID'), '<', '10'));
 echo $qc->interpretation(); // ((name = "ivan") AND (OID < "10"))

Более сложным является класс MultiCondition. Он представляет логические выражения с различными логическими связками. По аналогии с классом LogicOperation, данный класс использует левый и правый операнды, а так же логическую связку, но в качестве операндов он принимает целые логические выражения.

Ниже приведен пример использования данных классов:

 $mc = new MultiCondition($loName, 'AND', $loOID);
 echo $mc->interpretation(); // ((name = "ivan") AND (OID < "10"))
 $mc = new MultiCondition($mc, 'OR', new $loAge);
 echo $mc->interpretation(); // (((name = "ivan") AND (OID < "10")) OR (age >= "18"))
