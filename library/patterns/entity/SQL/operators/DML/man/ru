=Операторы манипуляции данными=
Пакет включает унифицирующие, интерпретируемые классы для операций типа - Data Manipulation Language (операторы манипуляции данными).

В пакете реализованы следующие операторы:
* Select - операция запроса данных;
* Update - операция изменения данных;
* Delete - операция удаления данных;
* Insert - операция добавления данных.

Так же в пакете реализованы следующие инструкции (компоненты операций):
* Table - целевая таблица запроса;
* Field и AliasField - целевые поля запроса и их псевдонимы;
* Limit - ограничение на число отбираемых записей;
* OrderBy - способ сортировки по целевым полям;
* Join - объединение данных;
* Where - условие отбора. Сюда входят следующие инструкции: LogicOperation (логическое сравнение), INLogicOperation (вхождение в множество), MultiCondition (логическое выражение), AndMultiCondition (логическое выражение типа И), OrMultiCondition (логическое выражение типа ИЛИ).

=Особенности использования механизма интерпретации=
==Select==
* Для определения псевдонима поля используется метод addAliasField объекта Select. Данный метод принимает объект класса FieldAlias и определяет запрашиваемое поле с псевдонимом;

 $select = new Select;
 $select->addAliasField(new FieldAlias(new Filed('name'), 'fieldName'));
 $select->addTable(new Table('people'));
 echo $select->interpretation('mysql'); // SELECT name as fieldName FROM people

* Для определения запроса всех полей таблицы, используется метод addAllField;

 $select = new Select;
 $select->addAllField();
 $select->addTable(new Table('people'));
 echo $select->interpretation('mysql'); // SELECT * FROM people

==Insert==
* Метод setSelect позволяет определить запрос, результаты которого будут использованы в качестве добавляемых строк в Insert инструкции;

 $insert = new Insert(new Table('people'));
 $select = new Select;
 $select->addAllField();
 $select->addTable(new Table('people'));
 $insert->setSelect($select);
 echo $insert->interpretation('mysql'); // INSERT INTO people (SELECT * FROM people)

Для более подробного ознакомления с возможностями тех или иных объектных SQL инструкций обращайтесь к документации API соответствующих классов.

=Особенности использования механизма восстановления=
==Select==
Допустимая структура унифицированной SQL инструкции Select имеет вид:

 SELECT (имяПоля[ as псевдоним])|(имяТаблицы.имяПоля)+ FROM (имяТаблицы)+[ JOIN имяТаблицы ON условиеОбъединения][ ORDER BY (имяПоля)|(имяТаблицы.имяПоля)+ (ASC)|(DESC)][ LIMIT количествоСтрок][ WHERE условноеВыражение]

==Update==
Допустимая структура унифицированной SQL инструкции Update имеет вид:

 UPDATE имяТаблицы SET (имяПоля = "значение")+[ WHERE логическоеВыражение]

==Insert==
Допустимая структура унифицированной SQL инструкции Insert имеет вид:

 INSERT INTO имяТаблицы \(имяПоля(, имяПоля)*\) VALUES \("значение"(, "значение")*\)

==Delete==
Допустимая структура унифицированной SQL инструкции Delete имеет вид:

 DELETE FROM имяТаблицы[ WHERE логическоеВыражение]

=Структура объектных SQL инструкций и компонентов=
На схеме ниже показано дерево наследования объектных SQL инструкций и компонентов:

img: inheritanceHierarchy.png

На схеме ниже показаны ассоциации, доступные для объектной SQL инструкции Select:

img: select.png

На схеме ниже показаны ассоциации, доступные для объектной SQL инструкции Update:

img: update.png

На схеме ниже показаны ассоциации, доступные для объектной SQL инструкции Insert:

img: insert.png

На схеме ниже показаны ассоциации, доступные для объектной SQL инструкции Delete:

img: delete.png