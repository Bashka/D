=Терминология=
* Ошибка - событие, вызванное нарушением в работе скрипта;
* Фатальная ошибка - ошибка, исключающая возможность дальнейшей работы скрипта;
* Предупреждение - ошибка, информирующая о нарушении правил функционирования языка;
* Уведомление - ошибка, информирующая о некотором важном событии в работе скрипта.

=Обработка ошибок=
Класс Handler реализует механизмы, позволяющие регистрировать функции-обработчики различных ошибок системы. Класс включает следующие основные статичные методы:
* registerErrorListener - регистрация функции-обработчика фатальных ошибок;
* registerWarningListener - регистрация функции-обработчика предупреждений;
* registerNoticeListener - регистрация функции-обработчика уведомлений.

Все эти методы могут быть вызваны неоднократно, что позволяет зарегистрировать очередь функций-обработчиков, которые будут вызываться поочередно, в порядке из регистрации, при появлении соответствующей ошибки.

В связи с природой фатальных ошибок, функции-обработчики, регистрируемые методом registerErrorListener, вызываются перед завершением работы скрипта, остановленного из за фатальной ошибки. Эти функции не могут повлиять на дальнейшую работу скрипта, а служат только для корректного завершения работы системы перед отключением. С другой стороны функции-обработчики, регистрируемые методами registerWarningListener и registerNoticeListener могут вернуть true для того, чтобы разрешить интерпретатору продолжить исполнение скрипта.

Ниже приведен пример использования данного класса:

 // Регистрация первого обработчика уведомлений.
 Handler::registerNoticeListener(function($code, $message){
   echo 'Notice listener A';
   return true;
 });
 // Регистрация второго обработчика уведомлений.
 Handler::registerNoticeListener(function($code, $message){
   echo 'Notice listener B';
   return true;
 });
 // Регистрация обработчика предупреждений.
 Handler::registerWarningListener(function($code, $message){
   echo 'Warning listener A';
   return true;
 });
 // Регистрация обработчика фатальных ошибок.
 Handler::registerErrorListener(function($error, $buffer){
   echo 'Error listener A';
 });
 trigger_error('notice', E_USER_NOTICE); // Последовательный вызов Notice listener A и Notice listener B.
 // Работа скрипта продолжается, так как оба обработчика вернули true.
 trigger_error('warning', E_USER_WARNING); // Вызов Warning listener A.
 // Работа скрипта продолжается.
 trigger_error('error', E_USER_ERROR); // Вызов Error listener A.
 // Работа скрипта не может быть продолжена из за появления фатальной ошибки, но обработчики все равно сработают.