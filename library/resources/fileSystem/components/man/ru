=Терминология=
* Компонент файловой системы - средство, позволяющее сохранять данные на постоянном носителе в виде именнованного файла или средство группировки файлов в виде каталога;
* Блокировка файла - механизм контролирующий доступ к файлу;
* Исключительная блокировка - запрет на доступ к файлу всем потокам, за исключением блокирующего;
* Выборочная блокировка - запрет на доступ к файлу потокам ввода.

=Программное представление компонентов файловой системы=
Для взаимодействия с компонентами файловой системы используются средства, реализованные в данном пакете. Они делятся на два основных класса:
* Файл (класс File) - экземпляры данного класса представляют файлы в файловой системе;
* Каталог (класс Directory) - экземпляры данного класса представляют каталоги в файловой системе.

Так как оба класса имеют много общих черт, таких как имя, возможность перемещения между каталогами, возможность удаления и создания, классы наследуют поведение от корневого родительского класса ComponentFileSystem, который объединяет общие свойства всех компонентов файловой системы.

img: ComponentFileSystem.png

Для контроля связей между компонентами файловой системы, каждый экземпляр этих классов должен относится к некоторому каталогу, который указывается при создании экземпляра или определяется автоматически относительно корня системы:

 $file = new File('file'); // Получение представления файла по указанному адресу относительно корня системы.
 $dir = new Directory('dir'); // Получение представления каталога по указанному адресу относительно корня системы;
 $subdir = new Directory('subdir', $dir); // Получение представления каталога, входящего в каталог dir.

Следует отметить, что конструктор классов File и Directory принимает в качестве аргумента либо адрес компонента относительно корня системы Delphinum, либо имя компонента и хранящий его каталог в качестве второго аргумента.

=Работа с каталогами=
Для управления каталогами в файловой системе используется класс Directory. Рассмотрим пример использования данного класса:

 $dir = new Directory('newDir');
 // Проверка на существование каталога.
 if(!$dir->isExists()){
   $dir->create(); // Создание каталога, если он не существует.
 }
 $dir->rename('dir'); // Переименование.
 echo $dir->getSize(); // Получение суммарного объема памяти, занимаемого всем содержимым каталога.
 echo $dir->getName(); // Получение имени каталога.
 $dir->delete(); // Рекурсивное удаление каталога.

В примере представлены далеко не все возможности класса Directory (за подробностями обращайтесь к документации по API класса), но заметно, как просто можно взаимодействовать с каталогом.

=Работа с файлами=
Для управления файлами в файловой системе используется класс File. Рассмотрим пример использования данного класса:

 $file = new File('newFile');
 // Проверка на существование файла.
 if(!$file->isExists()){
   $file->create(); // Создание файла, если он не существует.
 }
 $file->rename('file'); // Переименование.
 echo $file->getSize(); // Получение суммарного объема памяти, занимаемого файлом.
 echo $file->getName(); // Получение имени файла.
 $ws = $file->getWriter(); // Получение потока вывода в файл.
 $ws->write('Hello world'); // Запись в файл.
 $ws->close(); // Закрытие потока вывода.
 $file->delete(); // Удаление файла.

В примере представлены далеко не все возможности класса File (за подробностями обращайтесь к документации по API класса). Описание принципов работы с файлавыми потоками ввода/вывода представлено в пакете D\library\resources\fileSystem\io.

==Блокировка==
Класс File имеет встроеный механизм блокировки файла выборочной и исключительной блокировкой. Блокировка выполняется при получении потока ввода (getReader) или потока вывода (getWriter) и снимается при закрытии этих потоков, потому следует следить за своевременным закрытием полученных потоков.

 $file = new File('file');
 $ws = $file->getWriter(); // Получение потока вывода в файл.
 // Файл заблокирован исключительной блокировкой.
 $ws->write('Hello world'); // Запись в файл.
 $ws->close(); // Закрытие потока вывода.
 // Файл разблокирован.