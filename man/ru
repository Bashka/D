=Описание архитектуры=
Система '''Delphinum''' имеет многоуровневую архитектуру, состоящую из следующих слоев:
* Слой инструментов содержит элементы прикладной, низкоуровневой логики системы. Чаще всего данные инструменты используются элементами слоя служб через «Фасады», но могут быть доступны и из слоя домена. Данный слой не включает прикладную логику системы;
* Слой служб содержит элементы, реализующие общедоступные для всех элементов слоя домена механизмы. Данный слой не включает прикладную логику системы;
* Слой домена включает элементы, служащие для моделирования предметной области и реализации логики системы. Данный слой содержит только прикладную логику системы;
* Слой представления включает элементы, служащие для преобразования данных уровня домена в понятный пользователю вид, а так же для формирования интерфейса взаимодействия с ним.
Каждый слой включает несколько компонентов, решающих определенный круг задач слоя. Все они и связи между ними приведены на следующем рисунке:
img: Structure.png

=Слой инструментов=
Данный слой является самым низкоуровневым в системе с точки зрения решаемых задач. Его компоненты выполняют низкоуровневые операции и предоставляют множество вспомогательных инструментов остальным компонентам системы. Большая часть системы использует компоненты данного слоя для решения собственных задач, это приводит к усилению однонаправленной ассоциации с данным слоем.
Основными правилами отнесения классов к данному слою являются:
;Их низкоуровневая природа
:Каждый класс должен решать очень ограниченный круг задач и иметь низкий уровень абстракции.
;Их общедоступность
:Любой класс слоя инструментов должен быть как логически, так и физически доступен любому другому классу системы.
;Их вертикальная независимость
:Классы данного слоя могут взаимодействовать только друг с другом, но не с классами других слоев.
Компоненты слоя располагаются в каталоге ''D/library''.

=Слой служб=
Чаще всего низкоуровневые алгоритмы доступны через фасадные классы данного слоя. Эти классы предоставляют более удобный интерфейс доступа к низкоуровневым операциям, а так же позволяют решать группы взаимосвязанных задач. Разработка дополнительных классов данного слоя применяется для переопределения стандартного интерфейса взаимодействия со слоем инструментов.
Основными правилами отнесения классов к данному слою являются:
;Их фасадная природа
:Часто данные классы предоставляют более общий интерфейс для взаимодействия со слоем инструментов.
;Их многозадачность
:вызванная необходимостью группировки небольших, схожих между собой реализаций.
;Их обобщенность
:Данные классы служат именно для обобщения низкоуровневых и прикладных операций, от чего не должны быть доступны из слоя инструментов, но могут быть использованы другими слоями.
Важно помнить, что классы слоя служб не должны напрямую взаимодействовать с классами слоя домена или представления.
Компоненты слоя располагаются в каталоге ''D/services''.

=Слой домена=
Если слои служб и инструментов являются общедоступными и, следовательно, переносимыми частями системы, то лишь небольшая часть слоя домена может быть повторно использована как часть системы. Дело в том, что классы данного слоя обычно являются прикладными, от чего данный слой разделен на независимые "Модули", что позволяет легко заменять реализацию частей логики и наращивать ее в случае необходимости. Модульная природа данного слоя позволяет повторно использовать каждый модуль в рамках различных проектов, что позволяет формировать библиотеки модулей и ускорить реализацию сложных систем за счет их подключения. Разработчик должен уметь создавать модули с жесткими границами, чтобы удаление модуля не влияло на работу системы. Классы данного слоя не должны использоваться слоями инструментов и служб.
Основными правилами отнесения классов к данному слою являются:
;Их прикладная природа
:Классы одного модуля должны решать лишь те задачи, которые решает данный модуль.
;Недоступность
:за счет следования правилам системы относительно модульности слоя домена. Недопустим непосредственный вызов классов используемого модуля в обход его контроллера (если он не является родительским).
;Модульная природа классов
:но их общедоступность. Любой модуль может использовать другой установленный в системе модуль через его контроллер, а так же может наследовать и расширять поведения модуля.
Не смотря на то, что архитектура и правила взаимодействия компонентов данного слоя строго определены данной документацией и логикой слоя, ее возможно изменить в зависимости от решаемых задач. Совокупность архитектуры, правил взаимодействия и границ слоя домена называется '''Системой управления модулями'''.
Компоненты слоя располагаются в каталоге ''D/model''.

=Слой представления=
Обычно данный слой содержит файлы разметки, дизайна и логики интерфейса, объединенные в модуль, называемый "Экраном". Каждый экран, как правило, является пользовательским интерфейсом некоторого модуля слоя домена, более того, каждый модуль слоя домена может иметь неограниченное число экранов, что позволяет разделить пользовательский интерфейс модуля на части, на пример клиентскую и административную. Как и модули слоя домена, экраны имеют строгую границу, что позволяет заменять экраны без необходимости изменения других экранов.
Согласно правилу о модульности слоя домена, система не предоставляет стандартный пользовательский интерфейс. Такой подход позволяет разделить систему, реализующую пользовательский интерфейс и систему, управляющую логикой приложения. Он удобен тем, что бизнес-логика приложения становится независимой от интерфейса и может быть использована повторно, на пример, для различных клиентских платформ. Система, реализующая логику пользовательского интерфейса, называется '''Системой управления пользовательским интерфейсом'''.
Компоненты слоя располагаются в каталоге ''D/view''.